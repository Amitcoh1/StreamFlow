# Docker Compose for StreamFlow
 

version: '3.8'

services:
  # Infrastructure Services
  rabbitmq:
    image: rabbitmq:3-management
    container_name: streamflow-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - streamflow-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15
    container_name: streamflow-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=streamflow
      - POSTGRES_USER=streamflow
      - POSTGRES_PASSWORD=streamflow123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - streamflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U streamflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: streamflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - streamflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # StreamFlow Services
  ingestion:
    build:
      context: .
      dockerfile: ./docker/ingestion/Dockerfile
    container_name: streamflow-ingestion
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - DATABASE_URL=postgresql+asyncpg://streamflow:streamflow123@postgres:5432/streamflow
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=development-secret-key-change-in-production
      - CORS_ORIGINS="http://localhost:3000,http://localhost:3001,http://localhost:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streamflow-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  analytics:
    build:
      context: .
      dockerfile: ./docker/analytics/Dockerfile
    container_name: streamflow-analytics
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=development
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - DATABASE_URL=postgresql+asyncpg://streamflow:streamflow123@postgres:5432/streamflow
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=development-secret-key-change-in-production
      - CORS_ORIGINS="http://localhost:3000,http://localhost:3001,http://localhost:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streamflow-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  alerting:
    build:
      context: .
      dockerfile: ./docker/alerting/Dockerfile
    container_name: streamflow-alerting
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=development
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - DATABASE_URL=postgresql+asyncpg://streamflow:streamflow123@postgres:5432/streamflow
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=development-secret-key-change-in-production
      - CORS_ORIGINS="http://localhost:3000,http://localhost:3001,http://localhost:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streamflow-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  dashboard:
    build:
      context: .
      dockerfile: ./docker/dashboard/Dockerfile
    container_name: streamflow-dashboard
    ports:
      - "8004:8002"
    environment:
      - ENVIRONMENT=development
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - DATABASE_URL=postgresql+asyncpg://streamflow:streamflow123@postgres:5432/streamflow
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=development-secret-key-change-in-production
      - CORS_ORIGINS="http://localhost:3000,http://localhost:3001,http://localhost:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streamflow-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  storage:
    build:
      context: .
      dockerfile: ./docker/storage/Dockerfile
    container_name: streamflow-storage
    ports:
      - "8005:8004"
    environment:
      - ENVIRONMENT=development
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - DATABASE_URL=postgresql+asyncpg://streamflow:streamflow123@postgres:5432/streamflow
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=development-secret-key-change-in-production
      - CORS_ORIGINS="http://localhost:3000,http://localhost:3001,http://localhost:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streamflow-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: streamflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - streamflow-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: streamflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - streamflow-network
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: streamflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - ingestion
      - dashboard
      - storage
    networks:
      - streamflow-network
    restart: unless-stopped

  webhook:
    build:
      context: .
      dockerfile: docker/webhook/Dockerfile
    container_name: streamflow-webhook
    ports:
      - "8443:8443"
    volumes:
      - ./webhook-certs:/etc/certs:ro
    environment:
      - WEBHOOK_PORT=8443
      - WEBHOOK_CERT_DIR=/etc/certs
    networks:
      - streamflow-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  rabbitmq_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  streamflow-network:
    driver: bridge
