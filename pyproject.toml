[build-system]
requires = ["setuptools>=45", "wheel", "setuptools-scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "streamflow"
version = "1.0.0"
description = "real-time analytics pipeline using Python, FastAPI, and RabbitMQ"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Amit Cohen", email = "amit.cohen@streamflow.dev"},
]
maintainers = [
    {name = "Amit Cohen", email = "amit.cohen@streamflow.dev"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Monitoring",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Database",
    "Topic :: System :: Networking",
]
keywords = [
    "analytics",
    "real-time",
    "streaming",
    "microservices",
    "fastapi",
    "rabbitmq",
    "postgresql",
    "redis",
    "monitoring",
    "alerting",
    "dashboard",
    "event-processing",
    "stream-processing",
    "production-ready",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "aiohttp>=3.9.0",
    "asyncpg>=0.29.0",
    "aioredis>=2.0.1",
    "aio-pika>=9.3.0",
    "orjson>=3.9.0",
    "msgpack>=1.0.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.12.0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "httpx>=0.25.0",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    "croniter>=1.4.0",
    "aiofiles>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.25.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "isort>=5.12.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "grafana-api>=1.0.3",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.24.0",
]
all = [
    "streamflow[dev,monitoring,docs]",
]

[project.urls]
Homepage = "https://github.com/amitcohen/streamflow"
Documentation = "https://streamflow.readthedocs.io"
Repository = "https://github.com/amitcohen/streamflow"
Issues = "https://github.com/amitcohen/streamflow/issues"
Changelog = "https://github.com/amitcohen/streamflow/blob/main/CHANGELOG.md"

[project.scripts]
streamflow = "streamflow.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["streamflow*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
streamflow = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "aio_pika.*",
    "aioredis.*",
    "prometheus_client.*",
    "structlog.*",
    "uvicorn.*",
    "alembic.*",
    "croniter.*",
    "typer.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=streamflow",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
markers = [
    "asyncio: mark test as async",
    "integration: mark test as integration test",
    "performance: mark test as performance test",
    "unit: mark test as unit test",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["streamflow"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/migrations/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
    "migrations",
    "alembic",
]
